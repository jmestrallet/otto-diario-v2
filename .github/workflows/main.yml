name: X scheduler

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  actions: write

concurrency:
  group: otto-scheduler-${{ github.event_name }}   # schedule y manual quedan en grupos distintos
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Node.js (para cifrar secrets)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests
          npm i tweetsodium

      - name: Run scheduler
        env:
          X_CLIENT_ID: ${{ secrets.X_CLIENT_ID }}
          # Seguridad: leer de Secrets; si faltan, cae a Variables (solo para el primer run).
          REFRESH_TOKEN_ACC1: ${{ secrets.REFRESH_TOKEN_ACC1 }}
          REFRESH_TOKEN_ACC2: ${{ secrets.REFRESH_TOKEN_ACC2 }}
          REFRESH_TOKEN_ACC3: ${{ secrets.REFRESH_TOKEN_ACC3 }}

          ACCOUNTS_JSON: ${{ vars.ACCOUNTS_JSON }}
          CSV_FILE: ${{ vars.CSV_FILE }}
          STATE_FILE: ${{ vars.STATE_FILE }}
          WINDOW_MIN: ${{ vars.WINDOW_MIN }}
        run: |
          python post_scheduler.py

      - name: Subir artefacto con tokens rotados (backup)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: new-refresh-tokens
          path: .tokens_out.json
          if-no-files-found: ignore
          retention-days: 1

      - name: Commit posted.csv y threads.json (persist state)
        if: always()
        run: |
          CHANGED=0
          if [ -f "posted.csv" ]; then CHANGED=1; fi
          if [ -f "threads.json" ]; then CHANGED=1; fi
          if [ "$CHANGED" = "1" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git fetch origin
            git checkout $GITHUB_REF_NAME || true
            git pull --rebase --autostash origin $GITHUB_REF_NAME || true
            git add posted.csv threads.json
            git commit -m "chore: update state files [skip ci]" || echo "No changes"
            git push || echo "No push needed"
          fi

      - name: Rotar refresh tokens en Secrets (seguro)
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_ADMIN_TOKEN }}
          script: |
            const fs = require('fs');
            const sodium = require('tweetsodium');
            const path = '.tokens_out.json';
            if (!fs.existsSync(path)) {
              core.info('No hay tokens nuevos.');
              return;
            }
            const newTokens = JSON.parse(fs.readFileSync(path, 'utf8'));

            // Obtener clave p√∫blica del repo para cifrar cada secret
            const { data: pub } = await github.request('GET /repos/{owner}/{repo}/actions/secrets/public-key', {
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            for (const [acc, token] of Object.entries(newTokens)) {
              const name = `REFRESH_TOKEN_${acc}`;
              const messageBytes = Buffer.from(token);
              const keyBytes = Buffer.from(pub.key, 'base64');
              const encryptedBytes = sodium.seal(messageBytes, keyBytes);
              const encrypted = Buffer.from(encryptedBytes).toString('base64');

              await github.request('PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                secret_name: name,
                encrypted_value: encrypted,
                key_id: pub.key_id
              });
              core.info(`Rotado secret ${name}`);
            }
